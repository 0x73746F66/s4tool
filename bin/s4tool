#!/usr/bin/env python
import sys, os, colorlog, logging, argparse, json, rsa, boto3, socket, configparser
from os import path, getcwd, environ
from subprocess import check_output
from os.path import expanduser
from datetime import datetime, timedelta
from jinja2 import Environment, FileSystemLoader
from yaml import load, dump
from configparser import NoOptionError, NoSectionError


session = None
config = None


def aws_datetime(datetime_str):
    dt = datetime.strptime(datetime_str[:19], '%Y-%m-%d %X')
    d = timedelta(hours=int(datetime_str[20:22]),minutes=int(datetime_str[23:25]))
    if datetime_str[19] == '+':
        dt += d
    elif datetime_str[19] == '-':
        dt -= d
    
    return dt


def make_arn(service, resource, partition='aws', use_account_id=True, account_id=None, region=None):
  if use_account_id and not account_id:
    account_id = get_aws_account_id()

  return 'arn:{partition}:{service}:{region}:{account_id}:{resource}'.format(
    partition=partition,
    service=service,
    region=region or '',
    account_id=account_id or '',
    resource=resource
  )


def start_boto_session(credentials_file=None, temp_profile=None, access_key_id=None, secret_access_key=None, profile=None, region=None):
  global session
  log = logging.getLogger()
  if (access_key_id and not secret_access_key) or \
     (secret_access_key and not access_key_id):
    log.critical('Set both secret_access_key and access_key_id together')
    sys.exit(1)

  if not session:
    session = boto3.Session(profile_name=profile, region_name=region,
                            aws_access_key_id=access_key_id,
                            aws_secret_access_key=secret_access_key)
    if not profile:
      if not credentials_file or not temp_profile:
        log.critical('when not using a profile ensure credentials_file and temp_profile are defined')
        sys.exit(1)

    if access_key_id and secret_access_key:
      update_config(credentials_file,
                    profile=temp_profile,
                    region=region,
                    access_key_id=access_key_id,
                    secret_access_key=secret_access_key)


def get_aws_account_id(return_identity=False):
  global session
  sts_client = session.client('sts')

  identity = sts_client.get_caller_identity()
  if return_identity:
    return identity['Account'], identity
  
  return identity['Account']


def setup_logging(log_level):
  log = logging.getLogger()
  format_str = '%(asctime)s - %(levelname)-8s - %(message)s'
  date_format = '%Y-%m-%d %H:%M:%S'
  if os.isatty(2):
    cformat = '%(log_color)s' + format_str
    colors = {'DEBUG': 'reset',
              'INFO': 'bold_blue',
              'WARNING': 'bold_yellow',
              'ERROR': 'bold_red',
              'CRITICAL': 'bold_red'}
    formatter = colorlog.ColoredFormatter(cformat, date_format, log_colors=colors)
  else:
    formatter = logging.Formatter(format_str, date_format)

  if log_level > 0:
    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(formatter)
    log.addHandler(stream_handler)
  if log_level == 1:
    log.setLevel(logging.CRITICAL)
  if log_level == 2:
    log.setLevel(logging.ERROR)
  if log_level == 3:
    log.setLevel(logging.WARN)
  if log_level == 4:
    log.setLevel(logging.INFO)
  if log_level >= 5:
    log.setLevel(logging.DEBUG)


def assume_role(role, temp_profile, credentials_file, region=None, profile=None, force=False, duration=None):
  global session
  log = logging.getLogger()

  if role.startswith('arn:iam'):
    role_session_name = role.split('/')[:-1]
    role_arn = role
  else:
    role_session_name = role
    role_arn = make_arn('iam', path.join('role', role))

  should_assume = force

  expiration = get_aws_profile_option(credentials_file, temp_profile, 'expiration')
  aws_role_arn = get_aws_profile_option(credentials_file, temp_profile, 'aws_role_arn')

  expired = True
  if not expiration and not aws_role_arn:
    should_assume = True
  elif aws_role_arn == role_arn:
    td = aws_datetime(expiration) - datetime.utcnow()
    if aws_datetime(expiration) < datetime.utcnow():
      log.info('aws profile has expired at %s' % expiration)
      should_assume = True
    else:
      hours, remainder = divmod(td.seconds, 3600)
      minutes, seconds = divmod(remainder, 60)
      log.info('aws profile will expire in %d hrs %d mins %d secs' % (hours, minutes, seconds))
      expired = False

    if td.seconds < 90:
      should_assume = True

  if should_assume:
    assume_session = boto3.Session(profile_name=profile, region_name=region)
    sts_client = assume_session.client('sts')
    params = {
      'RoleArn': role_arn,
      'RoleSessionName': role_session_name
    }
    if duration and duration <= 43200 and duration >= 900:
      params['DurationSeconds'] = duration
    log.info('Assuming role %s' % role_arn)
    assumedRoleObject = sts_client.assume_role(**params)
    credentials = assumedRoleObject['Credentials']    
    session = boto3.Session(aws_access_key_id=credentials['AccessKeyId'],
                        aws_secret_access_key=credentials['SecretAccessKey'],
                        aws_session_token=credentials['SessionToken'],
                        region_name=region)

    td = aws_datetime(str(credentials['Expiration'])) - datetime.utcnow()
    hours, remainder = divmod(td.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    log.info('aws profile will expire in %d hrs %d mins %d secs' % (hours, minutes, seconds))
    update_config(credentials_file, temp_profile,
                  region=region,
                  role_arn=role_arn,
                  access_key_id=credentials['AccessKeyId'],
                  secret_access_key=credentials['SecretAccessKey'],
                  session_token=credentials['SessionToken'],
                  expiration=credentials['Expiration'])
  elif not expired:
    session = boto3.Session(aws_access_key_id=get_aws_profile_option(credentials_file, temp_profile, 'aws_access_key_id'),
                        aws_secret_access_key=get_aws_profile_option(credentials_file, temp_profile, 'aws_secret_access_key'),
                        aws_session_token=get_aws_profile_option(credentials_file, temp_profile, 'aws_session_token'),
                        region_name=region)


def get_aws_profile_option(credentials_file, profile, option):
  log = logging.getLogger()
  log.info('Reading aws credentials file option [%s] with profile [%s]' % (option, profile))
  config = configparser.RawConfigParser()
  
  try:
    with open(credentials_file, 'r') as f:
      config.readfp(f)
      value = config.get(profile, option)
  except NoSectionError:
    value = None
  except NoOptionError:
    value = None

  return value


def update_config(credentials_file, profile, access_key_id=None, secret_access_key=None, session_token=None, role_arn=None, region=None, expiration=None):
  log = logging.getLogger()
  log.info('Updating aws credentials file with profile [%s]' % profile)
  config = configparser.RawConfigParser()
  with open(credentials_file, 'r') as f:
    config.readfp(f)
    config.remove_section(profile)

  with open(credentials_file, 'w') as f:
    config.add_section(profile)
    config.set(profile, 'output', 'json')
    config.set(profile, 'aws_access_key_id', access_key_id)
    config.set(profile, 'aws_secret_access_key', secret_access_key)
    if session_token:
      config.set(profile, 'aws_session_token', session_token)
    if expiration:
      config.set(profile, 'expiration', expiration)
    if role_arn:
      config.set(profile, 'aws_role_arn', role_arn)
    if region:
      config.set(profile, 'region', region)
    config.write(f)


def get_config(config_file=None):
  global config
  log = logging.getLogger()
  user_home = environ.get('HOME')
  if not config_file:
    config_file = path.join(user_home, '.s4tool')

  if config_file.startswith('/'):
    parts = path.split(config_file)
    config_path = parts[0]
    config_file = ''.join(parts[-1:])
  else:
    config_path = path.realpath(getcwd())

  if not config:
    env = Environment(loader = FileSystemLoader(config_path), trim_blocks=True, lstrip_blocks=True)
    log.info('Reading configuration file at %s' % path.join(config_path, config_file))
    template = env.get_template(config_file)
    log.debug('Jinja2 parsing %s' % config_file)
    config = load(template.render({
      'USER': environ.get('USER'),
      'HOME': user_home,
      'HOSTNAME': socket.gethostname(),
      'PWD': path.realpath(getcwd())
    }))

  return config


def get_session(temp_profile, credentials_file):
  global session
  
  config = get_config()

  aws_region = config['aws'].get('region')
  aws_profile = config['aws'].get('profile')
  access_key_id = config['aws'].get('access_key_id')
  secret_access_key = config['aws'].get('secret_access_key')

  start_boto_session(temp_profile=temp_profile, credentials_file=credentials_file, profile=aws_profile, access_key_id=access_key_id, secret_access_key=secret_access_key, region=aws_region)
  if 'assume_role' in config['aws']:
    duration = config['aws'].get('assume_role_duration')
    assume_role(config['aws']['assume_role'], temp_profile=temp_profile, credentials_file=credentials_file, region=aws_region, profile=aws_profile, duration=duration)

  return session


def main(credentials_file, temp_profile, log_level=2, config_file=None):
  setup_logging(log_level)
  log = logging.getLogger()
  pwd = path.realpath(getcwd())

  config = get_config(config_file)
  aws_region = config['aws'].get('region')
  safe_mode = config.get('safe_mode', False)
  log.info('safe_mode %s' % safe_mode)
  session = get_session(temp_profile, credentials_file)
  profile = config['aws'].get('profile')
  if not profile or config['aws'].get('assume_role'):
    profile = temp_profile

  log.debug('test awscli %s', check_output(['aws', '--profile', profile, 's3', 'ls']) )
  kms = session.client('kms')
  kms_key_arn = None
  kms_key_id = config['s3'].get('kms_key_id')
  if kms_key_id:
    if kms_key_id.startswith('arn:aws'):
      kms_key_arn = kms_key_id
    else:
      kms_key_arn = make_arn('kms', kms_key_id, region=aws_region)
    log.debug('kms_key_arn [%s]' % kms_key_arn)
    log.info('gathering a list of KMS aliases')

    found_key = False
    found_alias = False
    if 'key/' in kms_key_arn:
      for k in kms.list_keys()['Keys']:
        log.debug('comparing %s' % k['KeyArn'])
        if kms_key_arn == k['KeyArn']:
          found_key = True
          log.info('found %s' % kms_key_arn)
    elif 'alias/' in kms_key_arn:
      for k in kms.list_aliases()['Aliases']:
        log.debug('comparing %s' % k['AliasArn'])
        if kms_key_arn == k['AliasArn']:
          found_alias = True
          log.info('found %s' % kms_key_arn)
    else:
      log.critical('kms_key_id should be either an alias or key arn')
      sys.exit(1)

    if not found_alias and not found_key:
      if safe_mode:
        log.critical('kms_key_id [%s] could not be found, perhaps try using the full arn in the config' % kms_key_arn)
        sys.exit(1)
      else:
        log.warn('kms_key_id [%s] could not be found, creating resources' % kms_key_arn)
        if 'setup' in config:
          key_origin = config['setup'].get('key_origin')
          key_store_id = config['setup'].get('key_store_id')
          if key_origin == 'AWS_CLOUDHSM' and not key_store_id:
            log.critical('key_store_id is requried when using AWS_CLOUDHSM origin')
            sys.exit(1)
          if config['setup'].get('key_policy'):
            params = {
              'Policy': json.dumps(config['setup']['key_policy']),
              'Origin': key_origin,
              'Description': "s4tool",
              'KeyUsage': 'ENCRYPT_DECRYPT'
            }
            if key_store_id:
              params['CustomKeyStoreId'] = key_store_id
            key = kms.create_key(**params)
        else:
          key = kms.create_key(
            BypassPolicyLockoutSafetyCheck=True,
            Origin=key_origin,
            Description="s4tool",
            KeyUsage='ENCRYPT_DECRYPT')
        key_id = key['KeyMetadata']['KeyId']
        kms_key_arn = key['KeyMetadata']['Arn']
        log.info('Created key with id [%s]' % key_id)
        if key_origin == 'EXTERNAL':
          key_material = config['setup'].get('key_material')
          if not key_material:
            log.critical('key_material is requried when using EXTERNAL origin')
            sys.exit(1)
          log.info('Retrieving ImportToken and PublicKey')
          parameters_for_import = kms.get_parameters_for_import(
              KeyId=key_id,
              WrappingAlgorithm='RSAES_OAEP_SHA_1',
              WrappingKeySpec='RSA_2048',
          )
          with open(path.join(pwd, 'PublicKey.b64'), 'w') as f:
            f.write(parameters_for_import['PublicKey'])
          check_output(['openssl',
                        'enc', '-d', '-base64', '-A',
                        '-in', path.join(pwd, 'PublicKey.b64'),
                        '-out', path.join(pwd, 'PublicKey.bin')])
          with open(path.join(pwd, 'ImportToken.b64'), 'w') as f:
            f.write(parameters_for_import['ImportToken'])
          check_output(['openssl',
                        'enc', '-d', '-base64', '-A',
                        '-in', path.join(pwd, 'ImportToken.b64'),
                        '-out', path.join(pwd, 'ImportToken.bin')])

          log.info('Retrieve key material [%s]' % key_material)
          with open(key_material) as f:
            log.info('Creating crypto envelope')
            check_output(['openssl',
                          'rsautl', '-encrypt', '-oaep', '-pubin', '-keyform', 'DER',
                          '-in', path.join(pwd, key_material),
                          '-inkey', path.join(pwd, 'PublicKey.bin'),
                          '-out', path.join(pwd, 'EncryptedKeyMaterial.bin')])
          log.info('Importing key material envelope to KMS')
          with open('ImportToken.bin', 'rb') as t:
            with open('EncryptedKeyMaterial.bin', 'rb') as f:
              kms.import_key_material(
                KeyId=key_id,
                ImportToken=t.read(),
                EncryptedKeyMaterial=f.read(),
                ExpirationModel='KEY_MATERIAL_DOES_NOT_EXPIRE'
              )

        if 'alias/' in config['s3']['kms_key_id']:
          alias = ''.join(config['s3']['kms_key_id'].split('/')[-1:])
          log.info('Creating alias/%s' % alias)
          kms.create_alias(AliasName='alias/%s' % alias, TargetKeyId=key_id)
        if 'setup' in config and config['setup'].get('enable_key_rotation'):
          log.info('Enabling key rotation')
          kms.enable_key_rotation(KeyId=key_id)

  s3 = session.client('s3')
  log.info('gathering a list of S3 buckets')
  found_bucket = False
  for b in s3.list_buckets()['Buckets']:
    if b['Name'] == config['s3']['bucket']:
      found_bucket = True
      log.info('bucket [%s] exists' % config['s3']['bucket'])
  if safe_mode and not found_bucket:
    log.critical('bucket [%s] could not be found' % config['s3']['bucket'])
    sys.exit(1)
  if not safe_mode and not found_bucket:
    log.warn('bucket [%s] could not be found, creating resources' % config['s3']['bucket'])
    s3.create_bucket(
      Bucket=config['s3']['bucket'],
      CreateBucketConfiguration={
        'LocationConstraint': aws_region
      }
    )
    sse = config['s3'].get('sse')
    if sse == 'aws:kms':
      log.info('Enabling bucket SSE with KMS CMK')
      s3.put_bucket_encryption(Bucket=config['s3']['bucket'],
          ServerSideEncryptionConfiguration={'Rules': [{'ApplyServerSideEncryptionByDefault': {'SSEAlgorithm': 'aws:kms','KMSMasterKeyID': kms_key_arn}}]})
    elif sse == 'AES256':
      log.info('Enabling bucket default S3SSE with AES256')
      s3.put_bucket_encryption(Bucket=config['s3']['bucket'],
          ServerSideEncryptionConfiguration={'Rules': [{'ApplyServerSideEncryptionByDefault': {'SSEAlgorithm': 'AES256'}}]})

    if 'setup' in config and config['setup'].get('bucket_policy'):
      log.info('Applying bucket policy')
      s3.put_bucket_policy(Bucket=config['s3']['bucket'], Policy=json.dumps(config['setup']['bucket_policy']))


if __name__ == '__main__':
  CREDS_FILE='%s/.aws/credentials' % expanduser("~")
  parser = argparse.ArgumentParser(description='s4tool')
  parser.add_argument('-f', '--credentials_file', default=CREDS_FILE, help='absolute path to aws credentials file (default: %s)' % CREDS_FILE)
  parser.add_argument('-c', '--config_file', default=None, help='absolute path to s4tool config file')
  parser.add_argument('-p', '--temp_profile', type=str, default='s4tool', help='s4tool will save credentials to leverage the awscli')
  parser.add_argument('-v', action='store_true')
  parser.add_argument('-vv', action='store_true')
  parser.add_argument('-vvv', action='store_true')
  parser.add_argument('-vvvv', action='store_true')
  parser.add_argument('-vvvvv', action='store_true')
  args = parser.parse_args()
  log_level = 0
  if args.v:
    log_level = 1
  elif args.vv:
    log_level = 2
  elif args.vvv:
    log_level = 3
  elif args.vvvv:
    log_level = 4
  elif args.vvvvv:
    log_level = 5
  params = {
    'credentials_file': args.credentials_file,
    'config_file': args.config_file,
    'temp_profile': args.temp_profile,
    'log_level': log_level
  }

  main(**params)
